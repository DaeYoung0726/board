spring:
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:tcp://localhost/~/board
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}

  jpa:          # spring 아래에 있어야해서 들여쓰기해야함.
    hibernate:
      ddl-auto: none    # ddl-auto: update를 쓰면 오류가 뜨는데 h2데이터베이스가 옛날버전이라 그런 것 같다. 그래서 이렇게 사용.
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    properties:
      default_batch_fetch_size: 100     # N+1문제를 해결하기 위해.


  mail:
    host: smtp.naver.com
    port: 465
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        transport:
          protocol: smtp
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            enable: true
            trust: smtp.naver.com

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}  # google 사용자 인증 정보를 만든 후 생긴 id.
            client-secret: ${GOOGLE_CLIENT_SECRET}    # google 사용자 인증 정보를 만든 후 생긴 보안 비밀번호.
            scope:
              - email
              - profile

          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}  # facebook 사용자 인증 정보를 만든 후 생긴 id.
            client-secret: ${FACEBOOK_CLIENT_SECRET}    # facebook 사용자 인증 정보를 만든 후 생긴 보안 비밀번호.
            scope:
              - email
              - public_profile

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              #- profile_image   image는 당장에 사용하지 않기에 지움.
            client-name: Naver
            authorization-grant-type: authorization_code      # autorization-grant-type 은 어떤 방식으로 인증을 할 것인가
            # 기존에 사용하던 권한 코드 부여 방식을 이용하기 때문에 authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver   # google, facebook 등은 기본적으로 설정되어 있지만 네이버는 설정안되어 있음.
            # https://developers.naver.com/docs/login/devguide/devguide.md 참조

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize    # 이 주소로 요청을 하면 네이버 로그인이 뜬다
            token-uri: https://nid.naver.com/oauth2.0/token                # 이 주소를 사용하여야 토큰을 받을 수 있다.
            user-info-uri: https://openapi.naver.com/v1/nid/me             # 이 주소를 사용하여야 프로필 정보를 받을 수 있다.
            user-name-attribute: response #회원 정보를 JSON으로 받는데 response라는 키값으로 네이버가 리턴해줌.




logging:
  level:
    org.hibernate.orm.jdbc.bind: debug

server:
  servlet:
    session:
      timeout: 1800
# *참고 :application.yml에서 설정 가능한 최소 시간은 1분이며, 분단위로 설정해야 합니다.